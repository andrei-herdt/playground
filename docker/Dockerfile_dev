FROM play_image:1.0

ARG NCORE

# Set image locale.
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV TZ=Europe/London

ARG NEOVIM_URL='https://github.com/neovim/neovim/archive/refs/tags/stable.tar.gz'

RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install \
    curl kmod \
    ripgrep tree xclip zip unzip \
    gettext \
        --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Neovim from source.
RUN mkdir -p /root/TMP \
&& cd /root/TMP && curl -LO $NEOVIM_URL \
&& tar -xvf stable.tar.gz \
&& cd /root/TMP/neovim-stable && make -j ${NCORE} && make install \
&& rm -rf /root/TMP

RUN update-alternatives --install /usr/local/bin/vi vi /usr/local/bin/nvim 1 && \
  update-alternatives --set vi /usr/local/bin/nvim

# Pynvim
RUN pip3 install pynvim

# Deno
#ENV DENO_INSTALL="/usr/local"
#RUN curl -fsSL https://deno.land/install.sh | sh

# Map rg to ag
RUN update-alternatives --install /usr/local/bin/ag ag /usr/bin/rg 1

# Notebook
RUN pip3 install notebook pudb

# Install robot descriptions  
RUN pip3 install robot_descriptions
ENV ROBOT_DESCRIPTIONS_CACHE=/workdir/

# Configurations
RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install \
    tmux zsh tig \
        --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*
	
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

# Configure git
RUN git config --global --add safe.directory /workdir/playground \
&& git config --global user.email "andrei.herdt@gmail.com" \
&& git config --global user.name "Andrei Herdt" \
&& git config --global core.editor vi

# Install proxsuite
RUN pip3 install proxsuite

# Install browser and xdg-utils
RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install \
    firefox xdg-utils \
    --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install dotfiles
RUN cd /root/ && git clone http://github.com/andrei-herdt/dotfiles \
&& cd /root/dotfiles/ \
&& cp .tmux.conf .zshrc ~

# Install fzf
#
RUN cd /root/ \
&& git clone --depth 1 http://github.com/junegunn/fzf .fzf \
&& cd .fzf \
&& ./install --all

# Install npm, python3-venv (for python linter)
RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install \
    npm python3-venv \
    --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install gh for github authorisation
RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install \
    gh \
    --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*
#
# Install htop
RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install \
    htop \
    --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN pip3 install mujoco_mjx brax

RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install \
    ffmpeg \
        --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*


# ML dependencies
# Cuda
ENV NVARCH x86_64
ENV NVIDIA_REQUIRE_CUDA "cuda>=11.8 brand=tesla,driver>=450,driver<451 brand=tesla,driver>=470,driver<471 brand=unknown,driver>=470,driver<471 brand=nvidia,driver>=470,driver<471 brand=nvidiartx,driver>=470,driver<471 brand=geforce,driver>=470,driver<471 brand=geforcertx,driver>=470,driver<471 brand=quadro,driver>=470,driver<471 brand=quadrortx,driver>=470,driver<471 brand=titan,driver>=470,driver<471 brand=titanrtx,driver>=470,driver<471"
ENV NV_CUDA_CUDART_VERSION 11.8.89-1
ENV NV_CUDA_COMPAT_PACKAGE cuda-compat-11-8

RUN apt-get update && apt-get install -y --no-install-recommends \
    gnupg2 curl ca-certificates && \
    curl -fsSLO https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/${NVARCH}/cuda-keyring_1.0-1_all.deb && \
    dpkg -i cuda-keyring_1.0-1_all.deb && \
    apt-get purge --autoremove -y curl \
    && rm -rf /var/lib/apt/lists/*

ENV CUDA_VERSION 11.8.0

# For libraries in the cuda-compat-* package: https://docs.nvidia.com/cuda/eula/index.html#attachment-a
RUN apt-get update && apt-get install -y --no-install-recommends \
    cuda-cudart-11-8=${NV_CUDA_CUDART_VERSION} \
    ${NV_CUDA_COMPAT_PACKAGE} \
    && rm -rf /var/lib/apt/lists/*

# Required for nvidia-docker v1
RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
    && echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH /usr/local/nvidia/lib:/usr/local/nvidia/lib64

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility

## Install cudnn
ENV NV_CUDNN_VERSION 8.9.0.131
ENV NV_CUDNN_PACKAGE_NAME "libcudnn8"

ENV NV_CUDNN_PACKAGE "libcudnn8=$NV_CUDNN_VERSION-1+cuda11.8"

RUN apt-get update && apt-get install -y --no-install-recommends \
    ${NV_CUDNN_PACKAGE} \
    && apt-mark hold ${NV_CUDNN_PACKAGE_NAME} \
    && rm -rf /var/lib/apt/lists/*

# Installs the wheel compatible with CUDA 11 and cuDNN 8.6 or newer.
# Note: wheels only available on linux.
RUN pip3 install --upgrade "jax[cuda11_local]" -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html

RUN cd /root/ \
&& wget https://developer.download.nvidia.com/compute/cuda/11.8.0/local_installers/cuda_11.8.0_520.61.05_linux.run \
&& chmod +x cuda_11.8.0_520.61.05_linux.run \
&& ./cuda_11.8.0_520.61.05_linux.run --silent --toolkit \
&& rm cuda_11.8.0_520.61.05_linux.run

RUN pip install nvidia-cuda-cupti-cu11

ENV MUJOCO_GL egl
ENV LD_LIBRARY_PATH /usr/local/cuda-11.8/targets/x86_64-linux/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64

# Network tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    iproute2 iputils-ping curl \
    && rm -rf /var/lib/apt/lists/*

# Lazygit
RUN LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*') \
&& curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz" \
&& tar xf lazygit.tar.gz lazygit \
&& sudo install lazygit /usr/local/bin
#
# Install nvtop
RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install \
    nvtop \
    --assume-yes --no-install-recommends && apt-get clean && rm -rf /var/lib/apt/lists/*

RUN pip install pandas
